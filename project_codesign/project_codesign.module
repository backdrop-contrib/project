<?php

/**
 * @file
 */

/**
 * Implements hook_menu().
 */
function project_codesign_menu() {
  $items = array();

  $items['admin/config/project/codesign'] = array(
    'title' => 'Codesign',
    'description' => 'Configure module signing settings',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('project_codesign_admin_form'),
    'access arguments' => array('administer projects'),
    'file' => 'project_codesign.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}


/**
 * Implements hook_project_release_release_xml_alter().
 *
 * Generate a signature record for the project.
 */
function project_codesign_project_release_release_xml_alter(&$project_meta, $release, $project) {
  $sig_time = time();
  $project_values = $project_meta['value'];

  $sig_list = array();
  $signers = project_codesign_get_active_signature_profiles();
  foreach ($signers as $signer => $signer_info) {
    $signature = project_codesign_sign_url($signer_info['crypto_engine'], $signer_info['profile_id'], $release, $project_values['date'], $project_meta['download_link']);
    if ($signature) {
      $sig_list[] = array(
        'key' => 'signature',
        'value' => array(
          'crypto_engine' => $signer_info['crypto_engine'],
          'profile_id' => $signer_info['profile_id'],
          'signature_block' => $signature,
        ),
      );
    }
  }

  // Add the signatures to the release.
  if ($sig_list) {
    $project_meta['value']['signatures'] = array(
      'key' => 'signatures',
      'value' => $sig_list,
    );
  }
}

/**
 * Sign some data with a specified crypto engine.
 *
 * This function will return a digital signature for a release.  The signature,
 * the signer's ID (crypto engine, profile), and what is signed (release NID,
 * version, release timestamp) will be saved in the database.
 *
 * If the package has already been signed in the past, then the existing
 * signature will be returned instead.  A signature is considered identical if
 * the (crytpto engine, profile) has previously signed the same (release NID,
 * version, release timestamp) of the package.
 *
 * @param $crypto_engine
 *   The name of the codesign module (e.g., codesign_gnupg) signing the package.
 * @param $profile_id
 *   The profile ID that should sign the package as returned by
 *   codesign_get_profiles().  Typically, this is the key ID of the signing key.
 * @param $release
 *   The project_release node.
 * @param $timestamp
 *   The timestamp of the release.
 * @param $url
 *   The URL of the package to be signed.
 * @param $force
 *   If TRUE, sign even if a version exists in the database.
 * @return
 *   Returns a string with the signature on success, NULL on failure.
 *
 * @see codesign_get_profiles()
 * @see codesign_sign()
 */
function project_codesign_sign_url($crypto_engine, $profile_id, $release, $timestamp, $url, $force=FALSE) {
  if (!$data) {
    watchdog('project_codesign', 'No data to sign', array(), WATCHDOG_WARNING);
    return;
  }

  // If the project has already been signed, return the existing signature.
  if ($timestamp && !$force) {
    $existing_sig = db_select('project_codesign_signatures', 's')
      ->fields('s', array('signature'))
      ->condition('s.crypto_engine', $crypto_engine)
      ->condition('s.profile_id', $profile_id)
      ->condition('s.release_nid', $release->nid)
      ->condition('s.version', $release->project_release['version'])
      ->condition('s.release_timestamp', $timestamp)
      ->execute()
      ->fetchCol();
    if ($existing_sig) {
      return $existing_sig;
    }
  }

  // Fetch the project to sign.
  $file = system_retrieve_file($url, 'temporary://');
  if (!$file) {
    watchdog('project_codesign', 'Could not fetch URL @url', array('@url' => $url), WATCHDOG_ERROR);
    return NULL;
  }
  $data = file_get_contents($file);
  file_delete($file->fid);

  // Generate, save, and return a signature.
  $signature = codesign_sign($crypto_engine, $profile_id, $data);
  $codesign_record = array(
    'release_nid' => $release->nid,
    'version' => $release->project_release['version'],
    'release_timestamp' => $timestamp,
    'signature_timestamp' => time(),
    'crypto_engine' => $crypto_engine,
    'profile_id' => $profile_id,
    'signature' => $signature,
  );
  backdrop_write_record('project_codesign_signatures', $codesign_record);

  return $signature;
}

/**
 * Returns a list of active signature profiles.  The signature profiles are
 * selected in the project_codesign admin page.
 *
 * @return
 *   An array of signature profiles to use when signing.
 *
 * @see codesign_get_signing_profiles()
 */
function project_codesign_get_active_signature_profiles() {
  $all_profiles = codesign_get_signing_profiles();
  $selected_profiles = array_filter(config('project_codesign.settings')->get('enabled_profiles'));

  // Return an array, even if $selected_profiles is not valid.
  if (!is_array($selected_profiles)) {
    return array();
  }

  // Return the list of active profiles that are enabled.
  return array_intersect_key($all_profiles, $selected_profiles);
}
