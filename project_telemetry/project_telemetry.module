<?php
/**
 * @file
 * Collects usage information from sites running the core "Telemetry" module.
 */

/**
 * Implements hook_menu().
 */
function project_telemetry_menu() {
  $items['node/%node/telemetry'] = array(
    'page callback' => 'project_telemetry_page',
    'page arguments' => array(1),
    'access callback' => 'project_telemetry_access',
    'access arguments' => array(1),
    'file' => 'project_telemetry.pages.inc',
    'title' => 'Telemetry',
    'type' => MENU_LOCAL_TASK,
    'weight' => -1,
  );
  return $items;
}

/**
 * Menu access callback; checks if Telemetry is enabled on this node.
 */
function project_telemetry_access($node, $account = NULL) {
  $access = user_access('access project telemetry data', $account);
  return $access && ($node->type === 'project' || $node->type === 'project_release');
}

/**
 * Load aggregated data for a node.
 *
 * @todo: Switch parameter $project_name to $project_nid.
 */
function project_telemetry_load_aggregates($project_name) {
  $result = db_query('SELECT item_key, item_value, COUNT(item_value) AS item_count FROM {project_telemetry_raw} WHERE project_name = :project_name GROUP BY item_key ORDER BY item_count DESC', array(':project_name' => $project_name));
  $rows = array();
  foreach ($result as $row) {
    $rows[$row->item_key][] = array(
      'item_value' => $row->item_value,
      'item_count' => $row->item_count,
    );
    if (!isset($totals[$row->item_key])) {
      $totals[$row->item_key] = 0;
    }
    $totals[$row->item_key] += $row->item_count;
  }

  // Populate totals.
  foreach ($rows as $item_key => $item_aggregates) {
    foreach ($item_aggregates as $i => $item_aggregate) {
      $rows[$item_key][$i]['percentage'] = round($item_aggregate['item_count'] / $totals[$item_key], 2);
    }
  }

  return $rows;
}
